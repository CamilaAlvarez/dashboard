/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LabsImport } from './routes/labs'
import { Route as DevicesImport } from './routes/devices'
import { Route as TreeRouteImport } from './routes/tree/route'
import { Route as IndexImport } from './routes/index'
import { Route as TreeIndexImport } from './routes/tree/index'
import { Route as TreeTreeIdRouteImport } from './routes/tree/$treeId/route'
import { Route as TreeTreeIdIndexImport } from './routes/tree/$treeId/index'
import { Route as TreeTreeIdTestRouteImport } from './routes/tree/$treeId/test/route'
import { Route as TreeTreeIdTestTestIdRouteImport } from './routes/tree/$treeId/test/$testId/route'
import { Route as TreeTreeIdTestTestIdIndexImport } from './routes/tree/$treeId/test/$testId/index'
import { Route as TreeTreeIdBuildBuildIdIndexImport } from './routes/tree/$treeId/build/$buildId/index'

// Create/Update Routes

const LabsRoute = LabsImport.update({
  path: '/labs',
  getParentRoute: () => rootRoute,
} as any)

const DevicesRoute = DevicesImport.update({
  path: '/devices',
  getParentRoute: () => rootRoute,
} as any)

const TreeRouteRoute = TreeRouteImport.update({
  path: '/tree',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TreeIndexRoute = TreeIndexImport.update({
  path: '/',
  getParentRoute: () => TreeRouteRoute,
} as any)

const TreeTreeIdRouteRoute = TreeTreeIdRouteImport.update({
  path: '/$treeId',
  getParentRoute: () => TreeRouteRoute,
} as any)

const TreeTreeIdIndexRoute = TreeTreeIdIndexImport.update({
  path: '/',
  getParentRoute: () => TreeTreeIdRouteRoute,
} as any)

const TreeTreeIdTestRouteRoute = TreeTreeIdTestRouteImport.update({
  path: '/test',
  getParentRoute: () => TreeTreeIdRouteRoute,
} as any)

const TreeTreeIdTestTestIdRouteRoute = TreeTreeIdTestTestIdRouteImport.update({
  path: '/$testId',
  getParentRoute: () => TreeTreeIdTestRouteRoute,
} as any)

const TreeTreeIdTestTestIdIndexRoute = TreeTreeIdTestTestIdIndexImport.update({
  path: '/',
  getParentRoute: () => TreeTreeIdTestTestIdRouteRoute,
} as any)

const TreeTreeIdBuildBuildIdIndexRoute =
  TreeTreeIdBuildBuildIdIndexImport.update({
    path: '/build/$buildId/',
    getParentRoute: () => TreeTreeIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/tree': {
      id: '/tree'
      path: '/tree'
      fullPath: '/tree'
      preLoaderRoute: typeof TreeRouteImport
      parentRoute: typeof rootRoute
    }
    '/devices': {
      id: '/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesImport
      parentRoute: typeof rootRoute
    }
    '/labs': {
      id: '/labs'
      path: '/labs'
      fullPath: '/labs'
      preLoaderRoute: typeof LabsImport
      parentRoute: typeof rootRoute
    }
    '/tree/$treeId': {
      id: '/tree/$treeId'
      path: '/$treeId'
      fullPath: '/tree/$treeId'
      preLoaderRoute: typeof TreeTreeIdRouteImport
      parentRoute: typeof TreeRouteImport
    }
    '/tree/': {
      id: '/tree/'
      path: '/'
      fullPath: '/tree/'
      preLoaderRoute: typeof TreeIndexImport
      parentRoute: typeof TreeRouteImport
    }
    '/tree/$treeId/test': {
      id: '/tree/$treeId/test'
      path: '/test'
      fullPath: '/tree/$treeId/test'
      preLoaderRoute: typeof TreeTreeIdTestRouteImport
      parentRoute: typeof TreeTreeIdRouteImport
    }
    '/tree/$treeId/': {
      id: '/tree/$treeId/'
      path: '/'
      fullPath: '/tree/$treeId/'
      preLoaderRoute: typeof TreeTreeIdIndexImport
      parentRoute: typeof TreeTreeIdRouteImport
    }
    '/tree/$treeId/test/$testId': {
      id: '/tree/$treeId/test/$testId'
      path: '/$testId'
      fullPath: '/tree/$treeId/test/$testId'
      preLoaderRoute: typeof TreeTreeIdTestTestIdRouteImport
      parentRoute: typeof TreeTreeIdTestRouteImport
    }
    '/tree/$treeId/build/$buildId/': {
      id: '/tree/$treeId/build/$buildId/'
      path: '/build/$buildId'
      fullPath: '/tree/$treeId/build/$buildId'
      preLoaderRoute: typeof TreeTreeIdBuildBuildIdIndexImport
      parentRoute: typeof TreeTreeIdRouteImport
    }
    '/tree/$treeId/test/$testId/': {
      id: '/tree/$treeId/test/$testId/'
      path: '/'
      fullPath: '/tree/$treeId/test/$testId/'
      preLoaderRoute: typeof TreeTreeIdTestTestIdIndexImport
      parentRoute: typeof TreeTreeIdTestTestIdRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  TreeRouteRoute: TreeRouteRoute.addChildren({
    TreeTreeIdRouteRoute: TreeTreeIdRouteRoute.addChildren({
      TreeTreeIdTestRouteRoute: TreeTreeIdTestRouteRoute.addChildren({
        TreeTreeIdTestTestIdRouteRoute:
          TreeTreeIdTestTestIdRouteRoute.addChildren({
            TreeTreeIdTestTestIdIndexRoute,
          }),
      }),
      TreeTreeIdIndexRoute,
      TreeTreeIdBuildBuildIdIndexRoute,
    }),
    TreeIndexRoute,
  }),
  DevicesRoute,
  LabsRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/tree",
        "/devices",
        "/labs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/tree": {
      "filePath": "tree/route.tsx",
      "children": [
        "/tree/$treeId",
        "/tree/"
      ]
    },
    "/devices": {
      "filePath": "devices.tsx"
    },
    "/labs": {
      "filePath": "labs.tsx"
    },
    "/tree/$treeId": {
      "filePath": "tree/$treeId/route.tsx",
      "parent": "/tree",
      "children": [
        "/tree/$treeId/test",
        "/tree/$treeId/",
        "/tree/$treeId/build/$buildId/"
      ]
    },
    "/tree/": {
      "filePath": "tree/index.tsx",
      "parent": "/tree"
    },
    "/tree/$treeId/test": {
      "filePath": "tree/$treeId/test/route.tsx",
      "parent": "/tree/$treeId",
      "children": [
        "/tree/$treeId/test/$testId"
      ]
    },
    "/tree/$treeId/": {
      "filePath": "tree/$treeId/index.tsx",
      "parent": "/tree/$treeId"
    },
    "/tree/$treeId/test/$testId": {
      "filePath": "tree/$treeId/test/$testId/route.tsx",
      "parent": "/tree/$treeId/test",
      "children": [
        "/tree/$treeId/test/$testId/"
      ]
    },
    "/tree/$treeId/build/$buildId/": {
      "filePath": "tree/$treeId/build/$buildId/index.tsx",
      "parent": "/tree/$treeId"
    },
    "/tree/$treeId/test/$testId/": {
      "filePath": "tree/$treeId/test/$testId/index.tsx",
      "parent": "/tree/$treeId/test/$testId"
    }
  }
}
ROUTE_MANIFEST_END */
